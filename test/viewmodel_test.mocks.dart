// Mocks generated by Mockito 5.2.0 from annotations
// in jobtest_lastfm/test/viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:jobtest_lastfm/services/repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository<T> extends _i1.Mock implements _i2.Repository<T> {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void Function(List<T>) get beforeFetch =>
      (super.noSuchMethod(Invocation.getter(#beforeFetch),
          returnValue: (List<T> data) {}) as void Function(List<T>));

  @override
  set beforeFetch(void Function(List<T>)? _beforeFetch) =>
      super.noSuchMethod(Invocation.setter(#beforeFetch, _beforeFetch),
          returnValueForMissingStub: null);

  @override
  void Function(List<T>) get afterFetch =>
      (super.noSuchMethod(Invocation.getter(#afterFetch),
          returnValue: (List<T> data) {}) as void Function(List<T>));

  @override
  set afterFetch(void Function(List<T>)? _afterFetch) =>
      super.noSuchMethod(Invocation.setter(#afterFetch, _afterFetch),
          returnValueForMissingStub: null);

  @override
  void Function(List<T>) get finalizedFetch =>
      (super.noSuchMethod(Invocation.getter(#finalizedFetch),
          returnValue: (List<T> data) {}) as void Function(List<T>));

  @override
  set finalizedFetch(void Function(List<T>)? _finalizedFetch) =>
      super.noSuchMethod(Invocation.setter(#finalizedFetch, _finalizedFetch),
          returnValueForMissingStub: null);

  @override
  _i2.RepoStatus get status => (super.noSuchMethod(Invocation.getter(#status),
      returnValue: _i2.RepoStatus.none) as _i2.RepoStatus);

  @override
  _i2.FetchPhase get fetchPhase =>
      (super.noSuchMethod(Invocation.getter(#fetchPhase),
          returnValue: _i2.FetchPhase.none) as _i2.FetchPhase);

  @override
  int get totalItems =>
      (super.noSuchMethod(Invocation.getter(#totalItems), returnValue: 0)
          as int);

  @override
  _i3.Stream<_i2.RepositoryFetchResult<T>?> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.RepositoryFetchResult<T>?>.empty())
          as _i3.Stream<_i2.RepositoryFetchResult<T>?>);

  @override
  _i3.Stream<_i2.RepositoryFetchResult<T>?> get streamPage =>
      (super.noSuchMethod(Invocation.getter(#streamPage),
              returnValue: Stream<_i2.RepositoryFetchResult<T>?>.empty())
          as _i3.Stream<_i2.RepositoryFetchResult<T>?>);

  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);

  @override
  void searchInit(String? searchStr, _i2.MusicInfoType? searchType) => super
      .noSuchMethod(Invocation.method(#searchInit, [searchStr, searchType]),
          returnValueForMissingStub: null);

  @override
  _i3.Future<void> next({int? uiDelayMillisecs = 0}) => (super.noSuchMethod(
      Invocation.method(#next, [], {#uiDelayMillisecs: uiDelayMillisecs}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
